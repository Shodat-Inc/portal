import React, { useRef, useState } from "react";
import Head from "next/head";
import styles from '../styles/Home.module.css';
import { useForm } from 'react-hook-form'
import { useSession, signIn } from 'next-auth/react';
import { redirect } from 'next/navigation';
import Router from 'next/router'

export default function Home() {
    const [todos, settodos] = useState([]);

    const fetchTodos = async () => {
        const response = await fetch("/api/users");
        const data = await response.json();
        console.log("DATA", data)
        settodos(data);
    };


    const userName = useRef("");
    const pass = useRef("");

    const { register, handleSubmit, formState: { errors } } = useForm();

    function Error({ message }: { message: any }) {
        return (
            <div className="rounded1  border1 border-red-600 bg-red-501 p-1 text-red-600">
                {message}
            </div>
        );
    }

    const onSubmit = async (data: any) => {
        console.log("JSONdata", data);

        // const response = await fetch("/api/users");
        // const resdata = await response.json();
        // console.log("DATA", resdata)
        // settodos(data);

        // resdata.map((todo) => {
        //     if (todo.username===data.username && todo.password===data.password && todo.userRole==="admin") {
        //         console.log("SUCCESS")
        //         Router.push('/user/welcome')
        //     } else {
        //         console.log("FAILED");
        //     }
        // })


        const result = await signIn("credentials", {
            username: data.username,
            password: data.password,
            redirect: true,
            callbackUrl: "/user/welcome",
        });
    }

    const session = useSession();

    console.log("session", session)

    return (
        <div className="container mx-auto px-20">

            <form onSubmit={handleSubmit(onSubmit)}>
                <div className="flex h-screen items-center justify-center bg-[#fbfbfb]">
                    <div className="grid w-80 grid-rows-4 gap-1">
                        <p className="font-semibold text-gray-700 text-3xl uppercase text-center">Sign In</p>
                        <div className="mb-2">
                            <input
                                type="text"
                                id="username"
                                className={`h-10 w-full rounded border p-2 text-sm ${errors.username ? `${styles.isInvalid}` : ''}`}
                                placeholder="Username"
                                {...register('username', {
                                    required: { value: true, message: 'Email is Required' },
                                    // pattern: { value: /.+@.+/, message: 'Invalid Email' },
                                })}
                            />
                            {errors.username && <Error message={errors.username.message!} />}
                        </div>
                        <div>
                            <input
                                type="password"
                                id="password"
                                className={`h-10 w-full rounded border p-2 text-sm ${errors.password ? `${styles.isInvalid}` : ''}`}
                                placeholder="Password"
                                {...register('password', {
                                    required: { value: true, message: 'Password is required' }
                                })}
                            />
                            {errors.password && <Error message={errors.password.message!} />}
                        </div>

                        <div>
                            <button className={`${styles.btnSignIn} rounded bg-[#FD5E57] text-gray-50 hover:bg-gradient-to-r hover:from-[#FD5E57] hover:to-[#FC477E]`}>Sign In</button>
                        </div>

                        <div>
                            <a href="">
                                <p className="mt-4 flex items-center text-xs text-gray-500 hover:text-gray-700">
                                    Forgot Password? | Not a member? Sign Up!
                                </p>
                            </a>
                        </div>
                    </div>
                </div>
            </form>



            {/* <div className={styles.container}>
                <Head>
                    <title>Create Next App</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <main>
                    <button onClick={fetchTodos}>Get todos</button>
                    <ul>
                        {todos.map((todo) => {
                            return (
                                <li
                                    style={{ color: `${todo.username ? "green" : "red"}` }}
                                    key={todo.id}
                                >
                                    {todo.password}:{todo.username}.
                                </li>
                            );
                        })}
                    </ul>
                </main>
            </div> */}

        </div>


    );
}